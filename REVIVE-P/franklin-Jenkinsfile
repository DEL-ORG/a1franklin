pipeline {
    agent any
    environment {
        docker_hub_credential = credentials('DOCKERHUB_CREDENTIALS')
        github_credential = credentials('github-jenkins')
    }
    
    options {
        buildDiscarder(logRotator(numToKeepStr: '7'))
        disableConcurrentBuilds()
        timeout(time: 10, unit: 'MINUTES')
        timestamps()
    }
    
    parameters {
        string(name: 'BRANCH_NAME', defaultValue: 'main', description: 'Enter the name of the branch')
    }

    
    
    stages {
       stage('Clone Repository') {
            steps {
                script {
                    git credentialsId: 'github-jenkins',
                        url: 'https://github.com/DEL-ORG/a1franklin.git',
                        branch: "${params.BRANCH_NAME}"
                }
            }
       }
       

        
        stage('Login to DockerHub') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'DOCKERHUB_CREDENTIALS',
                     usernameVariable: 'DOCKERHUB_USERNAME',
                     passwordVariable: 'DOCKERHUB_PASSWORD')]) {
                    sh """
                        docker login -u $DOCKERHUB_USERNAME -p $DOCKERHUB_PASSWORD
                    """
                }
            }
        }

        stage('unit-test ui') {
            agent {
             docker {
               image 'franklinagbanyo/ui-maven:v1.0.0'
               args '-u root:root'
            }    
        } 
            steps {
                sh
                 """
            cd REVIVE-P/src/ui
            mvn test -DskipTests=true
                """
            }       
        }


    
        stage('Unit Test catalog') {
            agent {
                docker {
                    image 'franklinagbanyo/golang:latest'
                    args '-u root:root'
                }
            }
            steps {
                sh  
                  """
                  cd  REVIVE-P/src/catalog
                      go test -buildscv=false
                """
                
            }
        }
    }
}


    post {
        success {
            slackSend color: '#2EB67D',
            channel: 'a1franklin', 
            message: "*REVIVE Project Build Status*" +
                     "\n Project Name: REVIVE" +
                     "\n Job Name: ${env.JOB_NAME}" +
                     "\n Build number: ${currentBuild.displayName}" +
                     "\n Build Status : *SUCCESS*" +
                     "\n Build url : ${env.BUILD_URL}"
        }
        failure {
            slackSend color: '#E01E5A',
            channel: 'a1franklin',  
            message: "*REVIVE Project Build Status*" +
                     "\n Project Name: REVIVE" +
                     "\n Job Name: ${env.JOB_NAME}" +
                     "\n Build number: ${currentBuild.displayName}" +
                     "\n Build Status : *FAILED*" +
                     "\n Build User : *franklin*" +
                     "\n Action : Please check the console output to fix this job IMMEDIATELY" +
                     "\n Build url : ${env.BUILD_URL}"
        }
        unstable {
            slackSend color: '#ECB22E',
            channel: 'REVIVE', 
            message: "*REVIVE Project Build Status*" +
                     "\n Project Name: REVIVE" +
                     "\n Job Name: ${env.JOB_NAME}" +
                     "\n Build number: ${currentBuild.displayName}" +
                     "\n Build Status : *UNSTABLE*" +
                     "\n Action : Please check the console output to fix this job IMMEDIATELY" +
                     "\n Build url : ${env.BUILD_URL}"
        }   
    }

